//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#define BASE 0
#define MATH 1
#define SYMB 2
#define ADJU  3

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <100>;
            key-positions = <2 0 1>;
            bindings = <&kp ESC>;
            layers = <0 4 5>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <17 18>;
            timeout-ms = <50>;
            layers = <0 4 5>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
            timeout-ms = <50>;
            layers = <0 4 5>;
        };

        change_lang {
            bindings = <&kp LA(LEFT_SHIFT)>;
            key-positions = <24 25>;
            layers = <0 4 5>;
        };

        win {
            bindings = <&kp LEFT_WIN>;
            key-positions = <20 21>;
            layers = <0>;
        };

        l_delete {
            bindings = <&kp BACKSPACE>;
            key-positions = <11 12>;
            timeout-ms = <50>;
            layers = <0 5 4>;
        };

        print_screen {
            bindings = <&kp LS(LG(S))>;
            key-positions = <32 33 34>;
            layers = <0>;
        };

        change_lang_2 {
            bindings = <&kp LA(LEFT_SHIFT)>;
            key-positions = <26 27>;
            layers = <0 4 5>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        td_sq_bracket: td_sq_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SQ_BRACKET";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        td_ro_bracket: td_ro_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_RO_BRACKET";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
        };

        td_qw_bracket: td_qw_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_QW_BRACKET";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;
        };

        td_marks: td_marks {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MARKS";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp EXCLAMATION>, <&kp QUESTION>;
        };

        td_m: td_m {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_M";
            #binding-cells = <0>;
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            tapping-term-ms = <150>;
        };

        td_ddots: td_ddots {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DDOTS";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMICOLON>;

            tapping-term-ms = <300>;
        };

        layer_tap_dot_space: layer_tap_dot_space {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_DOT_SPACE";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "balanced";
        };

        td_dot_space: td_dot_space {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DOT_SPACE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp PERIOD>, <&mc_dot_space>;
        };

        mod_tap_shift: mod_tap_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_SHIFT";
            bindings = <&kp>, <&td_comma_ddot>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "hold-preferred";
        };

        td_comma_ddot: td_comma_ddot {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_COMMA_DDOT";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
        };
    };

    macros {
        mc_comma_enter: mc_comma_enter {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp KP_ENTER>;
            label = "MC_COMMA_ENTER";
        };

        select_current_word: select_current_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT_ARROW) &kp LS(LC(RIGHT_ARROW))>;
            label = "SELECT_CURRENT_WORD";
        };

        mc_dot_space: mc_dot_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PERIOD &kp SPACE>;
            label = "MC_DOT_SPACE";
        };

        mc_comma_space: mc_comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "MC_COMMA_SPACE";
        };

        mc_unequal: mc_unequal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL>;
            label = "MC_UNEQUAL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        lett {
            bindings = <
           &kp Q  &kp W  &kp E   &kp R                 &kp T          &kp Y      &kp U                     &kp I               &kp O    &kp P
           &kp A  &kp S  &kp D   &kp F                 &kp G          &kp H      &kp J                     &kp K               &kp L    &kp SEMICOLON
&sk LCTRL  &kp Z  &kp X  &kp C   &kp V                 &kp B          &kp N      &td_m                     &kp COMMA           &kp DOT  &kp LEFT_BRACKET  &mt LCTRL SQT
                         &trans  &mt LEFT_GUI LA(TAB)  &lt 3 SPACE    &lt 2 TAB  &mt LEFT_SHIFT BACKSPACE  &kp LA(LEFT_SHIFT)
            >;
        };

        navigation {
            bindings = <
        &kp F2  &kp F3     &kp F4     &kp F5  &kp F6       &kp F7     &kp F8    &kp F9    &kp F10    &kp F11
        &trans  &kp LCTRL  &kp LSHFT  &trans  &kp ENTER    &kp ENTER  &kp LEFT  &kp UP    &kp RIGHT  &trans
&trans  &trans  &trans     &trans     &trans  &trans       &trans     &trans    &kp DOWN  &trans     &trans   &kp LG(L)
                           &trans     &trans  &trans       &trans     &trans    &trans
            >;
        };

        symbols {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans         &trans     &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans         &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &kp LS(SLASH)  &kp SLASH  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        numbers {
            bindings = <
        &trans  &trans  &kp ASTERISK  &kp SLASH  &kp NON_US_BACKSLASH    &trans     &kp N7  &kp N8      &kp N9  &trans
        &trans  &trans  &kp PLUS      &kp MINUS  &kp ENTER               &kp ENTER  &kp N4  &kp N5      &kp N6  &trans
&trans  &trans  &trans  &trans        &trans     &trans                  &trans     &kp N1  &kp N2      &kp N3  &trans  &trans
                        &trans        &trans     &trans                  &trans     &kp N0  &kp KP_DOT
            >;
        };

        sym {
            bindings = <
        &kp SLASH       &kp PLUS        &kp ASTERISK    &kp MINUS         &kp EQUAL    &kp PERCENT     &kp LESS_THAN         &kp CARET       &kp GREATER_THAN  &kp AMPERSAND
        &td_qw_bracket  &td_ro_bracket  &td_sq_bracket  &kp SINGLE_QUOTE  &kp COLON    &td_marks       &kp LEFT_ARROW        &kp UP_ARROW    &kp RIGHT_ARROW   &kp AT_SIGN
&trans  &trans          &kp LC(X)       &kp LC(C)       &kp LC(V)         &kp POUND    &kp UNDERSCORE  &select_current_word  &kp DOWN_ARROW  &kp LS(SLASH)     &kp SLASH      &kp BACKSLASH
                                        &kp LA(TAB)     &trans            &trans       &kp SPACE       &kp LCTRL             &kp GRAVE
            >;
        };

        num {
            bindings = <
              &kp ASTERISK  &kp N7        &kp N8        &kp N9        &kp PLUS     &kp PERCENT  &kp LEFT        &kp UP_ARROW   &kp RIGHT         &kp AMPERSAND
              &kp SLASH     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS    &td_marks    &kp LESS_THAN   &kp DOWN       &kp GREATER_THAN  &kp AT_SIGN
&kp LEFT_ALT  &kp N0        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL    &kp DOLLAR   &kp UNDERSCORE  &kp LS(SLASH)  &kp SLASH         &kp CARET      &kp BACKSLASH
                                          &kp DOT       &trans        &trans       &trans       &trans          &trans
            >;

            label = "num_layer";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        press_wtf {
            if-layers = <4 5>;
            then-layer = <1>;
        };
    };
};
