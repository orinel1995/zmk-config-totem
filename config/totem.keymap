//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#define BASE 0
#define MATH 1
#define SYMB 2
#define ADJU  3

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&sk {
    quick-release;
    release-after-ms = <1500>;
};

&lt { flavor = "balanced"; };

/ {
    combos {
        compatible = "zmk,combos";

        print_screen {
            bindings = <&kp LS(LG(S))>;
            key-positions = <32 33 34>;
            layers = <0>;
        };

        ctrl_alt_delete {
            bindings = <&kp LC(LA(DELETE))>;
            key-positions = <35 36 37>;
        };

        bt_0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <0 10 21>;
        };

        bt_1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <22 11 1>;
        };
    };

    behaviors {
        td_sq_bracket: td_sq_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SQ_BRACKET";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        td_ro_bracket: td_ro_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_RO_BRACKET";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
        };

        td_qw_bracket: td_qw_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_QW_BRACKET";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;
        };

        td_m: td_m {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_M";
            #binding-cells = <0>;
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            tapping-term-ms = <150>;
        };

        enter_on_space: enter_on_space {
            compatible = "zmk,behavior-mod-morph";
            label = "ENTER_ON_SPACE";
            bindings = <&lt 1 SPACE>, <&kp ENTER>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_RSFT|MOD_RCTL)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        undo_on_delete: undo_on_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDO_ON_DELETE";
            bindings = <&kp DELETE>, <&kp LC(Z)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_RSFT|MOD_RCTL)>;
        };

        hidden_tab: hidden_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "HIDDEN_TAB";
            bindings = <&lt 2 UNDERSCORE>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_RSFT|MOD_RCTL|MOD_LALT|MOD_RALT)>;
            keep-mods = <(MOD_LALT|MOD_RALT|MOD_LSFT|MOD_RSFT)>;
        };

        q_esc: q_esc {
            compatible = "zmk,behavior-mod-morph";
            label = "Q_ESC";
            bindings = <&kp Q>, <&kp ESC>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        mods_on_left_0: mods_on_left_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "MODS_ON_LEFT_0";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "hold-preferred";
            hold-while-undecided;
        };

        mods_on_left_1: mods_on_left_1 {
            compatible = "zmk,behavior-hold-tap";
            label = "MODS_ON_LEFT_1";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <150>;
            flavor = "hold-preferred";
            hold-while-undecided;
        };
    };

    macros {
        next_str_in_list: next_str_in_list {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp COMMA &kp SPACE &kp SQT>;
            label = "NEXT_STR_IN_LIST";
        };

        dict_value: dict_value {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp COLON &kp SPACE>;
            label = "DICT_VALUE";
        };

        select_current_word: select_current_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT) &kp LC(LS(RIGHT))>;
            label = "SELECT_CURRENT_WORD";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        letters {
            bindings = <
                                  &q_esc  &kp W  &kp E                 &kp R            &kp T              &kp Y        &kp U          &kp I                          &kp O    &kp P
                                  &kp A   &kp S  &kp D                 &kp F            &kp G              &kp H        &kp J          &kp K                          &kp L    &kp SEMICOLON
&mods_on_left_0 LCTRL LEFT_SHIFT  &kp Z   &kp X  &kp C                 &kp V            &kp B              &kp N        &td_m          &kp COMMA                      &kp DOT  &kp LEFT_BRACKET  &kp SQT
                                                 &mt LEFT_ALT LA(TAB)  &undo_on_delete  &enter_on_space    &hidden_tab  &kp BACKSPACE  &mt LEFT_SHIFT LA(LEFT_SHIFT)
            >;
        };

        numbers {
            bindings = <
                            &kp GRAVE   &kp LS(EXCL)  &kp LS(AT)    &kp LS(POUND)  &kp LS(DLLR)    &kp LS(PRCNT)  &kp LS(CARET)     &kp LS(AMPS)   &kp LS(PIPE)  &kp BSLH
                            &kp N0      &kp N1        &kp N2        &kp N3         &kp N4          &kp N5         &kp N6            &kp N7         &kp N8        &kp N9
&mods_on_left_1 LEFT_ALT 0  &kp PERIOD  &kp SLASH     &kp ASTERISK  &kp MINUS      &kp PLUS        &kp LESS_THAN  &kp GREATER_THAN  &kp LS(SLASH)  &kp SLASH     &kp COMMA  &kp RIGHT_ALT
                                                      &sk LEFT_GUI  &trans         &trans          &kp EQUAL      &trans            &trans
            >;
        };

        symbols {
            bindings = <
                &kp F2            &kp F3          &kp F4          &kp F5   &kp F6               &kp F7         &kp F8                &kp F9     &kp F10    &kp F11
                &kp LCTRL         &td_ro_bracket  &td_sq_bracket  &kp SQT  &next_str_in_list    &kp COLON      &kp LEFT              &kp UP     &kp RIGHT  &kp RCTRL
&kp LEFT_SHIFT  &kp LC(LEFT_ALT)  &trans          &td_qw_bracket  &kp SQT  &dict_value          &kp SEMICOLON  &select_current_word  &kp DOWN   &kp END    &kp RIGHT_ALT  &kp F12
                                                  &trans          &trans   &enter_on_space      &trans         &kp LC(BACKSPACE)     &kp LG(L)
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
