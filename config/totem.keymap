//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#define BASE 0
#define MATH 1
#define SYMB 2
#define ADJU  3

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        print_screen {
            bindings = <&kp LS(LG(S))>;
            key-positions = <32 33 34>;
            layers = <0>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        td_sq_bracket: td_sq_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SQ_BRACKET";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        td_ro_bracket: td_ro_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_RO_BRACKET";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
        };

        td_qw_bracket: td_qw_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_QW_BRACKET";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;
        };

        td_marks: td_marks {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MARKS";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp EXCLAMATION>, <&kp QUESTION>;
        };

        td_m: td_m {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_M";
            #binding-cells = <0>;
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            tapping-term-ms = <150>;
        };

        td_ddots: td_ddots {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DDOTS";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMICOLON>;

            tapping-term-ms = <300>;
        };

        layer_tap_dot_space: layer_tap_dot_space {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_DOT_SPACE";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "balanced";
        };

        td_dot_space: td_dot_space {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DOT_SPACE";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp PERIOD>, <&mc_dot_space>;
        };

        mod_tap_shift: mod_tap_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "MOD_TAP_SHIFT";
            bindings = <&kp>, <&td_comma_ddot>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "hold-preferred";
        };

        td_comma_ddot: td_comma_ddot {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_COMMA_DDOT";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
        };
    };

    macros {
        mc_comma_enter: mc_comma_enter {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp KP_ENTER>;
            label = "MC_COMMA_ENTER";
        };

        select_current_word: select_current_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT_ARROW) &kp LS(LC(RIGHT_ARROW))>;
            label = "SELECT_CURRENT_WORD";
        };

        mc_dot_space: mc_dot_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PERIOD &kp SPACE>;
            label = "MC_DOT_SPACE";
        };

        mc_comma_space: mc_comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "MC_COMMA_SPACE";
        };

        mc_unequal: mc_unequal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EQUAL>;
            label = "MC_UNEQUAL";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        letters {
            bindings = <
           &kp Q  &kp W  &kp E                 &kp R       &kp T          &kp Y      &kp U          &kp I                          &kp O    &kp P
           &kp A  &kp S  &kp D                 &kp F       &kp G          &kp H      &kp J          &kp K                          &kp L    &kp SEMICOLON
&kp LCTRL  &kp Z  &kp X  &kp C                 &kp V       &kp B          &kp N      &td_m          &kp COMMA                      &kp DOT  &kp LEFT_BRACKET  &kp SQT
                         &mt LEFT_ALT LA(TAB)  &kp DELETE  &lt 2 SPACE    &lt 1 TAB  &kp BACKSPACE  &mt LEFT_SHIFT LA(LEFT_SHIFT)
            >;
        };

        numbers {
            bindings = <
                &kp ESCAPE  &kp LESS_THAN  &kp CARET  &kp GREATER_THAN  &kp PERCENT    &trans  &kp N7  &kp N8  &kp N9  &trans
                &trans      &kp ASTERISK   &kp PLUS   &kp EQUAL         &kp ENTER      &trans  &kp N4  &kp N5  &kp N6  &trans
&kp LEFT_SHIFT  &trans      &kp SLASH      &kp MINUS  &kp UNDERSCORE    &kp POUND      &kp N0  &kp N1  &kp N2  &kp N3  &kp PERIOD  &kp LEFT_ALT
                                           &trans     &trans            &mo 2          &mo 1   &trans  &trans
            >;
        };

        symbols {
            bindings = <
                &kp ESCAPE  &trans          &trans          &trans   &trans       &trans     &kp SEMICOLON    &trans         &trans         &trans
                &kp LC(A)   &td_ro_bracket  &td_sq_bracket  &kp SQT  &kp ENTER    &trans     &kp COLON        &kp AT_SIGN    &kp AMPERSAND  &trans
&kp LEFT_SHIFT  &kp LC(Z)   &trans          &td_qw_bracket  &trans   &kp POUND    &kp GRAVE  &kp EXCLAMATION  &kp LS(SLASH)  &kp SLASH      &trans  &trans
                                            &trans          &trans   &mo 2        &mo 1      &trans           &trans
            >;
        };

        navigation {
            bindings = <
              &kp F2  &kp F3     &kp F4  &kp F5          &kp F6                  &kp F7         &kp F8         &kp F9    &kp F10     &kp F11
              &kp A   &kp LCTRL  &kp D   &kp LEFT_SHIFT  &kp ENTER               &kp PAGE_UP    &kp LEFT       &kp UP    &kp RIGHT   &kp HOME
&kp LEFT_GUI  &kp Z   &kp X      &kp C   &kp V           &select_current_word    &kp PAGE_DOWN  &kp BACKSPACE  &kp DOWN  &kp DELETE  &kp END   &kp LG(L)
                                 &trans  &trans          &trans                  &trans         &trans         &trans
            >;
        };

        layer_4 {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        press_wtf {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
