//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#define BASE 0
#define MATH 1
#define SYMB 2
#define ADJU  3

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        print_screen {
            bindings = <&kp LS(LG(S))>;
            key-positions = <32 33 34>;
            layers = <0>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        td_sq_bracket: td_sq_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SQ_BRACKET";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        td_ro_bracket: td_ro_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_RO_BRACKET";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
        };

        td_qw_bracket: td_qw_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_QW_BRACKET";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;
        };

        td_m: td_m {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_M";
            #binding-cells = <0>;
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            tapping-term-ms = <150>;
        };

        enter_on_space: enter_on_space {
            compatible = "zmk,behavior-mod-morph";
            label = "ENTER_ON_SPACE";
            bindings = <&lt 1 SPACE>, <&kp ENTER>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_RSFT|MOD_RCTL)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        delete_on_backspace: delete_on_backspace {
            compatible = "zmk,behavior-mod-morph";
            label = "DELETE_ON_BACKSPACE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_RSFT|MOD_RCTL)>;
        };

        undo_on_delete: undo_on_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDO_ON_DELETE";
            bindings = <&kp DELETE>, <&kp LC(Z)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_RSFT|MOD_RCTL)>;
        };

        hidden_tab: hidden_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "HIDDEN_TAB";
            bindings = <&mo 2>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LSFT|MOD_RSFT|MOD_RCTL|MOD_LALT|MOD_RALT)>;
            keep-mods = <(MOD_LALT|MOD_RALT)>;
        };
    };

    macros {
        next_str_in_list: next_str_in_list {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp COMMA &kp SPACE &kp SQT>;
            label = "NEXT_STR_IN_LIST";
        };

        dict_value: dict_value {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp COLON &kp SPACE>;
            label = "DICT_VALUE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        letters {
            bindings = <
           &kp Q  &kp W  &kp E                 &kp R            &kp T              &kp Y        &kp U                 &kp I                          &kp O    &kp P
           &kp A  &kp S  &kp D                 &kp F            &kp G              &kp H        &kp J                 &kp K                          &kp L    &kp SEMICOLON
&kp LCTRL  &kp Z  &kp X  &kp C                 &kp V            &kp B              &kp N        &td_m                 &kp COMMA                      &kp DOT  &kp LEFT_BRACKET  &mt LEFT_SHIFT SQT
                         &mt LEFT_ALT LA(TAB)  &undo_on_delete  &enter_on_space    &hidden_tab  &delete_on_backspace  &mt LEFT_SHIFT LA(LEFT_SHIFT)
            >;
        };

        numbers {
            bindings = <
          &kp ESCAPE  &kp LS(EXCL)  &kp LS(AT)    &kp LS(POUND)  &kp LS(DLLR)    &kp LS(PRCNT)   &kp LS(CARET)     &kp LS(AMPS)   &kp LS(PIPE)  &kp BSLH
          &kp N0      &kp N1        &kp N2        &kp N3         &kp N4          &kp N5          &kp N6            &kp N7         &kp N8        &kp N9
&kp LALT  &kp LCTRL   &kp SLASH     &kp ASTERISK  &kp MINUS      &kp PLUS        &kp LESS_THAN   &kp GREATER_THAN  &kp LS(SLASH)  &kp SLASH     &kp RCTRL  &kp LEFT_ALT
                                    &kp LEFT_GUI  &trans         &trans          &kp UNDERSCORE  &trans            &kp N0
            >;
        };

        symbols {
            bindings = <
                &kp F2     &kp F3          &kp F4          &kp F5   &kp F6               &kp F7     &kp F8         &kp F9    &kp F10    &kp F11
                &kp GRAVE  &td_ro_bracket  &td_sq_bracket  &kp SQT  &next_str_in_list    &kp COLON  &kp LEFT       &kp UP    &kp RIGHT  &trans
&kp LEFT_SHIFT  &kp POUND  &trans          &td_qw_bracket  &kp SQT  &dict_value          &kp GRAVE  &kp SEMICOLON  &kp DOWN  &kp SLASH  &trans   &trans
                                           &kp LEFT_GUI    &trans   &enter_on_space      &trans     &trans         &trans
            >;
        };

        navigation {
            bindings = <
              &kp F2  &kp F3     &kp F4  &kp F5          &kp F6                  &kp F7         &kp F8         &kp F9    &kp F10     &kp F11
              &kp A   &kp LCTRL  &kp D   &kp LEFT_SHIFT  &kp ENTER               &kp PAGE_UP    &kp LEFT       &kp UP    &kp RIGHT   &kp HOME
&kp LEFT_GUI  &kp Z   &kp X      &kp C   &kp V           &select_current_word    &kp PAGE_DOWN  &kp BACKSPACE  &kp DOWN  &kp DELETE  &kp END   &kp LG(L)
                                 &trans  &trans          &trans                  &trans         &trans         &trans
            >;
        };

        layer_4 {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        press_wtf {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
