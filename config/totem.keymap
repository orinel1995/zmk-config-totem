//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#define BASE 0
#define MATH 1
#define SYMB 2
#define ADJU  3

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <2 0>;
            bindings = <&kp ESC>;
            layers = <0>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <12 14>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <23 25>;
        };

        cut {
            bindings = <&kp K_CUT>;
            key-positions = <2 4>;
        };

        tabs {
            bindings = <&kp TAB>;
            key-positions = <13 16>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <14 13>;
            timeout-ms = <50>;
            layers = <0>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <15 16>;
            timeout-ms = <50>;
            layers = <0>;
        };

        change_lang {
            bindings = <&kp LA(LEFT_SHIFT)>;
            key-positions = <1 8>;
        };

        alt_tab {
            bindings = <&kp LA(TAB)>;
            key-positions = <4 25>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        td_sq_bracket: td_sq_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SQ_BRACKET";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        td_comma_enter: td_comma_enter {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_COMMA_ENTER";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp COMMA>, <&mc_comma_enter>;
        };

        layer_tap_dd: layer_tap_dd {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_DD";
            bindings = <&mo>, <&td_ddots>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
        };

        td_ro_bracket: td_ro_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_RO_BRACKET";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
        };

        td_qw_bracket: td_qw_bracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_QW_BRACKET";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;
        };

        td_marks: td_marks {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MARKS";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp EXCLAMATION>, <&kp QUESTION>;
        };

        td_dot_comma: td_dot_comma {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DOT_COMMA";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp PERIOD>, <&kp COMMA>;
        };

        td_p: td_p {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_P";
            #binding-cells = <0>;
            bindings = <&kp P>, <&kp LEFT_BRACKET>;
        };

        td_m: td_m {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_M";
            #binding-cells = <0>;
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            tapping-term-ms = <200>;
        };

        td_at_am: td_at_am {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_AT_AM";
            #binding-cells = <0>;
            bindings = <&kp AT_SIGN>, <&kp AMPERSAND>;
        };

        layer_tap_at_am: layer_tap_at_am {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_AT_AM";
            bindings = <&mo>, <&td_at_am>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
        };

        td_t: td_t {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_T";
            #binding-cells = <0>;
            bindings = <&kp T>, <&kp GRAVE>;

            tapping-term-ms = <400>;
        };

        td_ddots: td_ddots {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DDOTS";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>, <&kp COLON>;
        };

        layer_tap_num_dots: layer_tap_num_dots {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_NUM_DOTS";
            bindings = <&mo>, <&td_dots>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "balanced";
        };

        td_dots: td_dots {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_DOTS";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp PERIOD>, <&mc_dot_space>;
        };

        td_equal: td_equal {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_EQUAL";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp EQUAL>, <&mc_unequal>;
        };

        td_less_eq: td_less_eq {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_LESS_EQ";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp LESS_THAN>, <&mc_less_eq>;
        };

        td_more_eq: td_more_eq {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MORE_EQ";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp GREATER_THAN>, <&mc_more_eq>;
        };

        td_und_upp: td_und_upp {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_UND_UPP";
            #binding-cells = <0>;
            tapping-term-ms = <300>;
            bindings = <&kp CARET>, <&kp UNDERSCORE>;
        };
    };

    macros {
        mc_comma_enter: mc_comma_enter {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp KP_ENTER>;
            label = "MC_COMMA_ENTER";
        };

        select_current_word: select_current_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT_ARROW) &kp LS(LC(RIGHT_ARROW))>;
            label = "SELECT_CURRENT_WORD";
        };

        mc_dot_space: mc_dot_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp PERIOD &kp SPACE>;
            label = "MC_DOT_SPACE";
        };

        mc_comma_space: mc_comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "MC_COMMA_SPACE";
        };

        mc_unequal: mc_unequal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp EXCL &kp EQUAL &kp SPACE>;
            label = "MC_UNEQUAL";
        };

        mc_add: mc_add {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp PLUS &kp SPACE>;
            label = "MC_ADD";
        };

        mc_div: mc_div {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp SLASH &kp SPACE>;
            label = "MC_DIV";
        };

        mc_mult: mc_mult {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp ASTERISK &kp SPACE>;
            label = "MC_MULT";
        };

        mc_min: mc_min {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp MINUS &kp SPACE>;
            label = "MC_MIN";
        };

        mc_more_eq: mc_more_eq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp GREATER_THAN &kp EQUAL &kp SPACE>;
            label = "MC_MORE_EQ";
        };

        mc_less_eq: mc_less_eq {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp LESS_THAN &kp EQUAL &kp SPACE>;
            label = "MC_LESS_EQ";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        eu {
            bindings = <
       &kp Q  &kp W  &kp E      &kp R                    &kp T              &kp Y                  &kp U            &kp I      &kp O    &kp P
       &kp A  &kp S  &kp D      &kp F                    &kp G              &kp H                  &kp J            &kp K      &kp L    &kp SEMICOLON
&mo 2  &kp Z  &kp X  &kp C      &kp V                    &kp B              &kp N                  &td_m            &kp COMMA  &kp DOT  &kp LEFT_BRACKET  &lt 1 SQT
                     &td_ddots  &layer_tap_num_dots 2 0  &mt LCTRL SPACE    &mt LEFT_SHIFT RETURN  &td_comma_enter  &td_marks
            >;
        };

        sym {
            bindings = <
           &kp SLASH      &kp PLUS       &kp ASTERISK       &kp MINUS         &kp LEFT_BRACKET        &kp RIGHT_BRACKET      &kp LESS_THAN         &td_und_upp     &kp GREATER_THAN  &trans
           &kp PIPE       &kp GRAVE      &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp LEFT_ARROW        &kp UP_ARROW    &kp RIGHT_ARROW   &trans
&kp POUND  &kp BACKSLASH  &kp AMPERSAND  &kp DOLLAR         &kp PERCENT       &kp LEFT_BRACE          &kp RIGHT_BRACE        &kp LC(Z)             &kp DOWN_ARROW  &kp LC(Y)         &trans  &trans
                                         &trans             &trans            &trans                  &trans                 &select_current_word  &trans
            >;
        };

        num {
            bindings = <
        &mc_div  &mc_add  &mc_mult       &mc_min  &td_equal    &kp RIGHT_BRACKET      &td_less_eq           &td_und_upp     &td_more_eq      &none
        &kp N0   &kp N1   &kp N2         &kp N3   &kp N4       &kp RIGHT_PARENTHESIS  &kp LEFT_ARROW        &kp UP_ARROW    &kp RIGHT_ARROW  &none
&trans  &kp N5   &kp N6   &kp N7         &kp N8   &kp N9       &kp RIGHT_BRACE        &kp LC(Z)             &kp DOWN_ARROW  &kp LC(Y)        &none  &kp POUND
                          &kp LS(LG(S))  &trans   &trans       &trans                 &select_current_word  &trans
            >;
        };
    };
};
